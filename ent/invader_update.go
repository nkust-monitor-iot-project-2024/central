// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/nkust-monitor-iot-project-2024/central/ent/event"
	"github.com/nkust-monitor-iot-project-2024/central/ent/invader"
	"github.com/nkust-monitor-iot-project-2024/central/ent/predicate"
)

// InvaderUpdate is the builder for updating Invader entities.
type InvaderUpdate struct {
	config
	hooks    []Hook
	mutation *InvaderMutation
}

// Where appends a list predicates to the InvaderUpdate builder.
func (iu *InvaderUpdate) Where(ps ...predicate.Invader) *InvaderUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetPicture sets the "picture" field.
func (iu *InvaderUpdate) SetPicture(b []byte) *InvaderUpdate {
	iu.mutation.SetPicture(b)
	return iu
}

// SetConfidence sets the "confidence" field.
func (iu *InvaderUpdate) SetConfidence(f float64) *InvaderUpdate {
	iu.mutation.ResetConfidence()
	iu.mutation.SetConfidence(f)
	return iu
}

// SetNillableConfidence sets the "confidence" field if the given value is not nil.
func (iu *InvaderUpdate) SetNillableConfidence(f *float64) *InvaderUpdate {
	if f != nil {
		iu.SetConfidence(*f)
	}
	return iu
}

// AddConfidence adds f to the "confidence" field.
func (iu *InvaderUpdate) AddConfidence(f float64) *InvaderUpdate {
	iu.mutation.AddConfidence(f)
	return iu
}

// AddEventIDIDs adds the "event_id" edge to the Event entity by IDs.
func (iu *InvaderUpdate) AddEventIDIDs(ids ...uuid.UUID) *InvaderUpdate {
	iu.mutation.AddEventIDIDs(ids...)
	return iu
}

// AddEventID adds the "event_id" edges to the Event entity.
func (iu *InvaderUpdate) AddEventID(e ...*Event) *InvaderUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return iu.AddEventIDIDs(ids...)
}

// Mutation returns the InvaderMutation object of the builder.
func (iu *InvaderUpdate) Mutation() *InvaderMutation {
	return iu.mutation
}

// ClearEventID clears all "event_id" edges to the Event entity.
func (iu *InvaderUpdate) ClearEventID() *InvaderUpdate {
	iu.mutation.ClearEventID()
	return iu
}

// RemoveEventIDIDs removes the "event_id" edge to Event entities by IDs.
func (iu *InvaderUpdate) RemoveEventIDIDs(ids ...uuid.UUID) *InvaderUpdate {
	iu.mutation.RemoveEventIDIDs(ids...)
	return iu
}

// RemoveEventID removes "event_id" edges to Event entities.
func (iu *InvaderUpdate) RemoveEventID(e ...*Event) *InvaderUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return iu.RemoveEventIDIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InvaderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InvaderUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InvaderUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InvaderUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *InvaderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(invader.Table, invader.Columns, sqlgraph.NewFieldSpec(invader.FieldID, field.TypeUUID))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Picture(); ok {
		_spec.SetField(invader.FieldPicture, field.TypeBytes, value)
	}
	if value, ok := iu.mutation.Confidence(); ok {
		_spec.SetField(invader.FieldConfidence, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedConfidence(); ok {
		_spec.AddField(invader.FieldConfidence, field.TypeFloat64, value)
	}
	if iu.mutation.EventIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   invader.EventIDTable,
			Columns: invader.EventIDPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedEventIDIDs(); len(nodes) > 0 && !iu.mutation.EventIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   invader.EventIDTable,
			Columns: invader.EventIDPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.EventIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   invader.EventIDTable,
			Columns: invader.EventIDPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invader.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InvaderUpdateOne is the builder for updating a single Invader entity.
type InvaderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InvaderMutation
}

// SetPicture sets the "picture" field.
func (iuo *InvaderUpdateOne) SetPicture(b []byte) *InvaderUpdateOne {
	iuo.mutation.SetPicture(b)
	return iuo
}

// SetConfidence sets the "confidence" field.
func (iuo *InvaderUpdateOne) SetConfidence(f float64) *InvaderUpdateOne {
	iuo.mutation.ResetConfidence()
	iuo.mutation.SetConfidence(f)
	return iuo
}

// SetNillableConfidence sets the "confidence" field if the given value is not nil.
func (iuo *InvaderUpdateOne) SetNillableConfidence(f *float64) *InvaderUpdateOne {
	if f != nil {
		iuo.SetConfidence(*f)
	}
	return iuo
}

// AddConfidence adds f to the "confidence" field.
func (iuo *InvaderUpdateOne) AddConfidence(f float64) *InvaderUpdateOne {
	iuo.mutation.AddConfidence(f)
	return iuo
}

// AddEventIDIDs adds the "event_id" edge to the Event entity by IDs.
func (iuo *InvaderUpdateOne) AddEventIDIDs(ids ...uuid.UUID) *InvaderUpdateOne {
	iuo.mutation.AddEventIDIDs(ids...)
	return iuo
}

// AddEventID adds the "event_id" edges to the Event entity.
func (iuo *InvaderUpdateOne) AddEventID(e ...*Event) *InvaderUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return iuo.AddEventIDIDs(ids...)
}

// Mutation returns the InvaderMutation object of the builder.
func (iuo *InvaderUpdateOne) Mutation() *InvaderMutation {
	return iuo.mutation
}

// ClearEventID clears all "event_id" edges to the Event entity.
func (iuo *InvaderUpdateOne) ClearEventID() *InvaderUpdateOne {
	iuo.mutation.ClearEventID()
	return iuo
}

// RemoveEventIDIDs removes the "event_id" edge to Event entities by IDs.
func (iuo *InvaderUpdateOne) RemoveEventIDIDs(ids ...uuid.UUID) *InvaderUpdateOne {
	iuo.mutation.RemoveEventIDIDs(ids...)
	return iuo
}

// RemoveEventID removes "event_id" edges to Event entities.
func (iuo *InvaderUpdateOne) RemoveEventID(e ...*Event) *InvaderUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return iuo.RemoveEventIDIDs(ids...)
}

// Where appends a list predicates to the InvaderUpdate builder.
func (iuo *InvaderUpdateOne) Where(ps ...predicate.Invader) *InvaderUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InvaderUpdateOne) Select(field string, fields ...string) *InvaderUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Invader entity.
func (iuo *InvaderUpdateOne) Save(ctx context.Context) (*Invader, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InvaderUpdateOne) SaveX(ctx context.Context) *Invader {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InvaderUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InvaderUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *InvaderUpdateOne) sqlSave(ctx context.Context) (_node *Invader, err error) {
	_spec := sqlgraph.NewUpdateSpec(invader.Table, invader.Columns, sqlgraph.NewFieldSpec(invader.FieldID, field.TypeUUID))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Invader.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invader.FieldID)
		for _, f := range fields {
			if !invader.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != invader.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Picture(); ok {
		_spec.SetField(invader.FieldPicture, field.TypeBytes, value)
	}
	if value, ok := iuo.mutation.Confidence(); ok {
		_spec.SetField(invader.FieldConfidence, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedConfidence(); ok {
		_spec.AddField(invader.FieldConfidence, field.TypeFloat64, value)
	}
	if iuo.mutation.EventIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   invader.EventIDTable,
			Columns: invader.EventIDPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedEventIDIDs(); len(nodes) > 0 && !iuo.mutation.EventIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   invader.EventIDTable,
			Columns: invader.EventIDPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.EventIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   invader.EventIDTable,
			Columns: invader.EventIDPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Invader{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invader.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
