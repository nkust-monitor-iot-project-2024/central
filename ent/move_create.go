// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/nkust-monitor-iot-project-2024/central/ent/event"
	"github.com/nkust-monitor-iot-project-2024/central/ent/move"
)

// MoveCreate is the builder for creating a Move entity.
type MoveCreate struct {
	config
	mutation *MoveMutation
	hooks    []Hook
}

// SetCycle sets the "cycle" field.
func (mc *MoveCreate) SetCycle(f float64) *MoveCreate {
	mc.mutation.SetCycle(f)
	return mc
}

// SetID sets the "id" field.
func (mc *MoveCreate) SetID(u uuid.UUID) *MoveCreate {
	mc.mutation.SetID(u)
	return mc
}

// AddEventIDs adds the "event" edge to the Event entity by IDs.
func (mc *MoveCreate) AddEventIDs(ids ...uuid.UUID) *MoveCreate {
	mc.mutation.AddEventIDs(ids...)
	return mc
}

// AddEvent adds the "event" edges to the Event entity.
func (mc *MoveCreate) AddEvent(e ...*Event) *MoveCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return mc.AddEventIDs(ids...)
}

// Mutation returns the MoveMutation object of the builder.
func (mc *MoveCreate) Mutation() *MoveMutation {
	return mc.mutation
}

// Save creates the Move in the database.
func (mc *MoveCreate) Save(ctx context.Context) (*Move, error) {
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MoveCreate) SaveX(ctx context.Context) *Move {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MoveCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MoveCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MoveCreate) check() error {
	if _, ok := mc.mutation.Cycle(); !ok {
		return &ValidationError{Name: "cycle", err: errors.New(`ent: missing required field "Move.cycle"`)}
	}
	if len(mc.mutation.EventIDs()) == 0 {
		return &ValidationError{Name: "event", err: errors.New(`ent: missing required edge "Move.event"`)}
	}
	return nil
}

func (mc *MoveCreate) sqlSave(ctx context.Context) (*Move, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MoveCreate) createSpec() (*Move, *sqlgraph.CreateSpec) {
	var (
		_node = &Move{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(move.Table, sqlgraph.NewFieldSpec(move.FieldID, field.TypeUUID))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mc.mutation.Cycle(); ok {
		_spec.SetField(move.FieldCycle, field.TypeFloat64, value)
		_node.Cycle = value
	}
	if nodes := mc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   move.EventTable,
			Columns: move.EventPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MoveCreateBulk is the builder for creating many Move entities in bulk.
type MoveCreateBulk struct {
	config
	err      error
	builders []*MoveCreate
}

// Save creates the Move entities in the database.
func (mcb *MoveCreateBulk) Save(ctx context.Context) ([]*Move, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Move, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MoveMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MoveCreateBulk) SaveX(ctx context.Context) []*Move {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MoveCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MoveCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
