// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nkust-monitor-iot-project-2024/central/ent/event"
	"github.com/nkust-monitor-iot-project-2024/central/ent/invader"
)

// InvaderCreate is the builder for creating a Invader entity.
type InvaderCreate struct {
	config
	mutation *InvaderMutation
	hooks    []Hook
}

// SetPicture sets the "picture" field.
func (ic *InvaderCreate) SetPicture(b []byte) *InvaderCreate {
	ic.mutation.SetPicture(b)
	return ic
}

// SetConfidence sets the "confidence" field.
func (ic *InvaderCreate) SetConfidence(f float64) *InvaderCreate {
	ic.mutation.SetConfidence(f)
	return ic
}

// AddEventIDIDs adds the "event_id" edge to the Event entity by IDs.
func (ic *InvaderCreate) AddEventIDIDs(ids ...int) *InvaderCreate {
	ic.mutation.AddEventIDIDs(ids...)
	return ic
}

// AddEventID adds the "event_id" edges to the Event entity.
func (ic *InvaderCreate) AddEventID(e ...*Event) *InvaderCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ic.AddEventIDIDs(ids...)
}

// Mutation returns the InvaderMutation object of the builder.
func (ic *InvaderCreate) Mutation() *InvaderMutation {
	return ic.mutation
}

// Save creates the Invader in the database.
func (ic *InvaderCreate) Save(ctx context.Context) (*Invader, error) {
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InvaderCreate) SaveX(ctx context.Context) *Invader {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InvaderCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InvaderCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InvaderCreate) check() error {
	if _, ok := ic.mutation.Picture(); !ok {
		return &ValidationError{Name: "picture", err: errors.New(`ent: missing required field "Invader.picture"`)}
	}
	if _, ok := ic.mutation.Confidence(); !ok {
		return &ValidationError{Name: "confidence", err: errors.New(`ent: missing required field "Invader.confidence"`)}
	}
	return nil
}

func (ic *InvaderCreate) sqlSave(ctx context.Context) (*Invader, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *InvaderCreate) createSpec() (*Invader, *sqlgraph.CreateSpec) {
	var (
		_node = &Invader{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(invader.Table, sqlgraph.NewFieldSpec(invader.FieldID, field.TypeInt))
	)
	if value, ok := ic.mutation.Picture(); ok {
		_spec.SetField(invader.FieldPicture, field.TypeBytes, value)
		_node.Picture = value
	}
	if value, ok := ic.mutation.Confidence(); ok {
		_spec.SetField(invader.FieldConfidence, field.TypeFloat64, value)
		_node.Confidence = value
	}
	if nodes := ic.mutation.EventIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invader.EventIDTable,
			Columns: []string{invader.EventIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InvaderCreateBulk is the builder for creating many Invader entities in bulk.
type InvaderCreateBulk struct {
	config
	err      error
	builders []*InvaderCreate
}

// Save creates the Invader entities in the database.
func (icb *InvaderCreateBulk) Save(ctx context.Context) ([]*Invader, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Invader, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InvaderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InvaderCreateBulk) SaveX(ctx context.Context) []*Invader {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InvaderCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InvaderCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
