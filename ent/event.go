// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/nkust-monitor-iot-project-2024/central/ent/event"
)

// Event is the model entity for the Event schema.
type Event struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type event.Type `json:"type,omitempty"`
	// DeviceID holds the value of the "device_id" field.
	DeviceID string `json:"device_id,omitempty"`
	// ParentEventID holds the value of the "parent_event_id" field.
	ParentEventID *uuid.UUID `json:"parent_event_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventQuery when eager-loading is set.
	Edges        EventEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EventEdges holds the relations/edges for other nodes in the graph.
type EventEdges struct {
	// Invaders holds the value of the invaders edge.
	Invaders []*Invader `json:"invaders,omitempty"`
	// Movements holds the value of the movements edge.
	Movements []*Movement `json:"movements,omitempty"`
	// Moves holds the value of the moves edge.
	Moves []*Move `json:"moves,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// InvadersOrErr returns the Invaders value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) InvadersOrErr() ([]*Invader, error) {
	if e.loadedTypes[0] {
		return e.Invaders, nil
	}
	return nil, &NotLoadedError{edge: "invaders"}
}

// MovementsOrErr returns the Movements value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) MovementsOrErr() ([]*Movement, error) {
	if e.loadedTypes[1] {
		return e.Movements, nil
	}
	return nil, &NotLoadedError{edge: "movements"}
}

// MovesOrErr returns the Moves value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) MovesOrErr() ([]*Move, error) {
	if e.loadedTypes[2] {
		return e.Moves, nil
	}
	return nil, &NotLoadedError{edge: "moves"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Event) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case event.FieldParentEventID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case event.FieldType, event.FieldDeviceID:
			values[i] = new(sql.NullString)
		case event.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case event.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Event fields.
func (e *Event) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case event.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				e.ID = *value
			}
		case event.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				e.Type = event.Type(value.String)
			}
		case event.FieldDeviceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				e.DeviceID = value.String
			}
		case event.FieldParentEventID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field parent_event_id", values[i])
			} else if value.Valid {
				e.ParentEventID = new(uuid.UUID)
				*e.ParentEventID = *value.S.(*uuid.UUID)
			}
		case event.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Event.
// This includes values selected through modifiers, order, etc.
func (e *Event) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryInvaders queries the "invaders" edge of the Event entity.
func (e *Event) QueryInvaders() *InvaderQuery {
	return NewEventClient(e.config).QueryInvaders(e)
}

// QueryMovements queries the "movements" edge of the Event entity.
func (e *Event) QueryMovements() *MovementQuery {
	return NewEventClient(e.config).QueryMovements(e)
}

// QueryMoves queries the "moves" edge of the Event entity.
func (e *Event) QueryMoves() *MoveQuery {
	return NewEventClient(e.config).QueryMoves(e)
}

// Update returns a builder for updating this Event.
// Note that you need to call Event.Unwrap() before calling this method if this Event
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Event) Update() *EventUpdateOne {
	return NewEventClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Event entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Event) Unwrap() *Event {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Event is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Event) String() string {
	var builder strings.Builder
	builder.WriteString("Event(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", e.Type))
	builder.WriteString(", ")
	builder.WriteString("device_id=")
	builder.WriteString(e.DeviceID)
	builder.WriteString(", ")
	if v := e.ParentEventID; v != nil {
		builder.WriteString("parent_event_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Events is a parsable slice of Event.
type Events []*Event
