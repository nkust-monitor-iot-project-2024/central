// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/nkust-monitor-iot-project-2024/central/ent/event"
	"github.com/nkust-monitor-iot-project-2024/central/ent/invader"
	"github.com/nkust-monitor-iot-project-2024/central/ent/movement"
	"github.com/nkust-monitor-iot-project-2024/central/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEvent    = "Event"
	TypeInvader  = "Invader"
	TypeMovement = "Movement"
)

// EventMutation represents an operation that mutates the Event nodes in the graph.
type EventMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	_type            *event.Type
	created_at       *time.Time
	clearedFields    map[string]struct{}
	invaders         map[uuid.UUID]struct{}
	removedinvaders  map[uuid.UUID]struct{}
	clearedinvaders  bool
	movements        map[uuid.UUID]struct{}
	removedmovements map[uuid.UUID]struct{}
	clearedmovements bool
	done             bool
	oldValue         func(context.Context) (*Event, error)
	predicates       []predicate.Event
}

var _ ent.Mutation = (*EventMutation)(nil)

// eventOption allows management of the mutation configuration using functional options.
type eventOption func(*EventMutation)

// newEventMutation creates new mutation for the Event entity.
func newEventMutation(c config, op Op, opts ...eventOption) *EventMutation {
	m := &EventMutation{
		config:        c,
		op:            op,
		typ:           TypeEvent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEventID sets the ID field of the mutation.
func withEventID(id uuid.UUID) eventOption {
	return func(m *EventMutation) {
		var (
			err   error
			once  sync.Once
			value *Event
		)
		m.oldValue = func(ctx context.Context) (*Event, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Event.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEvent sets the old Event of the mutation.
func withEvent(node *Event) eventOption {
	return func(m *EventMutation) {
		m.oldValue = func(context.Context) (*Event, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EventMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EventMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Event entities.
func (m *EventMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EventMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EventMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Event.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *EventMutation) SetType(e event.Type) {
	m._type = &e
}

// GetType returns the value of the "type" field in the mutation.
func (m *EventMutation) GetType() (r event.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldType(ctx context.Context) (v event.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *EventMutation) ResetType() {
	m._type = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *EventMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EventMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EventMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddInvaderIDs adds the "invaders" edge to the Invader entity by ids.
func (m *EventMutation) AddInvaderIDs(ids ...uuid.UUID) {
	if m.invaders == nil {
		m.invaders = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.invaders[ids[i]] = struct{}{}
	}
}

// ClearInvaders clears the "invaders" edge to the Invader entity.
func (m *EventMutation) ClearInvaders() {
	m.clearedinvaders = true
}

// InvadersCleared reports if the "invaders" edge to the Invader entity was cleared.
func (m *EventMutation) InvadersCleared() bool {
	return m.clearedinvaders
}

// RemoveInvaderIDs removes the "invaders" edge to the Invader entity by IDs.
func (m *EventMutation) RemoveInvaderIDs(ids ...uuid.UUID) {
	if m.removedinvaders == nil {
		m.removedinvaders = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.invaders, ids[i])
		m.removedinvaders[ids[i]] = struct{}{}
	}
}

// RemovedInvaders returns the removed IDs of the "invaders" edge to the Invader entity.
func (m *EventMutation) RemovedInvadersIDs() (ids []uuid.UUID) {
	for id := range m.removedinvaders {
		ids = append(ids, id)
	}
	return
}

// InvadersIDs returns the "invaders" edge IDs in the mutation.
func (m *EventMutation) InvadersIDs() (ids []uuid.UUID) {
	for id := range m.invaders {
		ids = append(ids, id)
	}
	return
}

// ResetInvaders resets all changes to the "invaders" edge.
func (m *EventMutation) ResetInvaders() {
	m.invaders = nil
	m.clearedinvaders = false
	m.removedinvaders = nil
}

// AddMovementIDs adds the "movements" edge to the Movement entity by ids.
func (m *EventMutation) AddMovementIDs(ids ...uuid.UUID) {
	if m.movements == nil {
		m.movements = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.movements[ids[i]] = struct{}{}
	}
}

// ClearMovements clears the "movements" edge to the Movement entity.
func (m *EventMutation) ClearMovements() {
	m.clearedmovements = true
}

// MovementsCleared reports if the "movements" edge to the Movement entity was cleared.
func (m *EventMutation) MovementsCleared() bool {
	return m.clearedmovements
}

// RemoveMovementIDs removes the "movements" edge to the Movement entity by IDs.
func (m *EventMutation) RemoveMovementIDs(ids ...uuid.UUID) {
	if m.removedmovements == nil {
		m.removedmovements = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.movements, ids[i])
		m.removedmovements[ids[i]] = struct{}{}
	}
}

// RemovedMovements returns the removed IDs of the "movements" edge to the Movement entity.
func (m *EventMutation) RemovedMovementsIDs() (ids []uuid.UUID) {
	for id := range m.removedmovements {
		ids = append(ids, id)
	}
	return
}

// MovementsIDs returns the "movements" edge IDs in the mutation.
func (m *EventMutation) MovementsIDs() (ids []uuid.UUID) {
	for id := range m.movements {
		ids = append(ids, id)
	}
	return
}

// ResetMovements resets all changes to the "movements" edge.
func (m *EventMutation) ResetMovements() {
	m.movements = nil
	m.clearedmovements = false
	m.removedmovements = nil
}

// Where appends a list predicates to the EventMutation builder.
func (m *EventMutation) Where(ps ...predicate.Event) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EventMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EventMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Event, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EventMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EventMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Event).
func (m *EventMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EventMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._type != nil {
		fields = append(fields, event.FieldType)
	}
	if m.created_at != nil {
		fields = append(fields, event.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EventMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case event.FieldType:
		return m.GetType()
	case event.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EventMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case event.FieldType:
		return m.OldType(ctx)
	case event.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Event field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) SetField(name string, value ent.Value) error {
	switch name {
	case event.FieldType:
		v, ok := value.(event.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case event.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EventMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EventMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Event numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EventMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EventMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EventMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Event nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EventMutation) ResetField(name string) error {
	switch name {
	case event.FieldType:
		m.ResetType()
		return nil
	case event.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EventMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.invaders != nil {
		edges = append(edges, event.EdgeInvaders)
	}
	if m.movements != nil {
		edges = append(edges, event.EdgeMovements)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EventMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case event.EdgeInvaders:
		ids := make([]ent.Value, 0, len(m.invaders))
		for id := range m.invaders {
			ids = append(ids, id)
		}
		return ids
	case event.EdgeMovements:
		ids := make([]ent.Value, 0, len(m.movements))
		for id := range m.movements {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EventMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedinvaders != nil {
		edges = append(edges, event.EdgeInvaders)
	}
	if m.removedmovements != nil {
		edges = append(edges, event.EdgeMovements)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EventMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case event.EdgeInvaders:
		ids := make([]ent.Value, 0, len(m.removedinvaders))
		for id := range m.removedinvaders {
			ids = append(ids, id)
		}
		return ids
	case event.EdgeMovements:
		ids := make([]ent.Value, 0, len(m.removedmovements))
		for id := range m.removedmovements {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EventMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedinvaders {
		edges = append(edges, event.EdgeInvaders)
	}
	if m.clearedmovements {
		edges = append(edges, event.EdgeMovements)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EventMutation) EdgeCleared(name string) bool {
	switch name {
	case event.EdgeInvaders:
		return m.clearedinvaders
	case event.EdgeMovements:
		return m.clearedmovements
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EventMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Event unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EventMutation) ResetEdge(name string) error {
	switch name {
	case event.EdgeInvaders:
		m.ResetInvaders()
		return nil
	case event.EdgeMovements:
		m.ResetMovements()
		return nil
	}
	return fmt.Errorf("unknown Event edge %s", name)
}

// InvaderMutation represents an operation that mutates the Invader nodes in the graph.
type InvaderMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	picture         *[]byte
	confidence      *float64
	addconfidence   *float64
	clearedFields   map[string]struct{}
	event_id        map[uuid.UUID]struct{}
	removedevent_id map[uuid.UUID]struct{}
	clearedevent_id bool
	done            bool
	oldValue        func(context.Context) (*Invader, error)
	predicates      []predicate.Invader
}

var _ ent.Mutation = (*InvaderMutation)(nil)

// invaderOption allows management of the mutation configuration using functional options.
type invaderOption func(*InvaderMutation)

// newInvaderMutation creates new mutation for the Invader entity.
func newInvaderMutation(c config, op Op, opts ...invaderOption) *InvaderMutation {
	m := &InvaderMutation{
		config:        c,
		op:            op,
		typ:           TypeInvader,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInvaderID sets the ID field of the mutation.
func withInvaderID(id uuid.UUID) invaderOption {
	return func(m *InvaderMutation) {
		var (
			err   error
			once  sync.Once
			value *Invader
		)
		m.oldValue = func(ctx context.Context) (*Invader, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Invader.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInvader sets the old Invader of the mutation.
func withInvader(node *Invader) invaderOption {
	return func(m *InvaderMutation) {
		m.oldValue = func(context.Context) (*Invader, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InvaderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InvaderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Invader entities.
func (m *InvaderMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *InvaderMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *InvaderMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Invader.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPicture sets the "picture" field.
func (m *InvaderMutation) SetPicture(b []byte) {
	m.picture = &b
}

// Picture returns the value of the "picture" field in the mutation.
func (m *InvaderMutation) Picture() (r []byte, exists bool) {
	v := m.picture
	if v == nil {
		return
	}
	return *v, true
}

// OldPicture returns the old "picture" field's value of the Invader entity.
// If the Invader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvaderMutation) OldPicture(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPicture is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPicture requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPicture: %w", err)
	}
	return oldValue.Picture, nil
}

// ResetPicture resets all changes to the "picture" field.
func (m *InvaderMutation) ResetPicture() {
	m.picture = nil
}

// SetConfidence sets the "confidence" field.
func (m *InvaderMutation) SetConfidence(f float64) {
	m.confidence = &f
	m.addconfidence = nil
}

// Confidence returns the value of the "confidence" field in the mutation.
func (m *InvaderMutation) Confidence() (r float64, exists bool) {
	v := m.confidence
	if v == nil {
		return
	}
	return *v, true
}

// OldConfidence returns the old "confidence" field's value of the Invader entity.
// If the Invader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvaderMutation) OldConfidence(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfidence is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfidence requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfidence: %w", err)
	}
	return oldValue.Confidence, nil
}

// AddConfidence adds f to the "confidence" field.
func (m *InvaderMutation) AddConfidence(f float64) {
	if m.addconfidence != nil {
		*m.addconfidence += f
	} else {
		m.addconfidence = &f
	}
}

// AddedConfidence returns the value that was added to the "confidence" field in this mutation.
func (m *InvaderMutation) AddedConfidence() (r float64, exists bool) {
	v := m.addconfidence
	if v == nil {
		return
	}
	return *v, true
}

// ResetConfidence resets all changes to the "confidence" field.
func (m *InvaderMutation) ResetConfidence() {
	m.confidence = nil
	m.addconfidence = nil
}

// AddEventIDIDs adds the "event_id" edge to the Event entity by ids.
func (m *InvaderMutation) AddEventIDIDs(ids ...uuid.UUID) {
	if m.event_id == nil {
		m.event_id = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.event_id[ids[i]] = struct{}{}
	}
}

// ClearEventID clears the "event_id" edge to the Event entity.
func (m *InvaderMutation) ClearEventID() {
	m.clearedevent_id = true
}

// EventIDCleared reports if the "event_id" edge to the Event entity was cleared.
func (m *InvaderMutation) EventIDCleared() bool {
	return m.clearedevent_id
}

// RemoveEventIDIDs removes the "event_id" edge to the Event entity by IDs.
func (m *InvaderMutation) RemoveEventIDIDs(ids ...uuid.UUID) {
	if m.removedevent_id == nil {
		m.removedevent_id = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.event_id, ids[i])
		m.removedevent_id[ids[i]] = struct{}{}
	}
}

// RemovedEventID returns the removed IDs of the "event_id" edge to the Event entity.
func (m *InvaderMutation) RemovedEventIDIDs() (ids []uuid.UUID) {
	for id := range m.removedevent_id {
		ids = append(ids, id)
	}
	return
}

// EventIDIDs returns the "event_id" edge IDs in the mutation.
func (m *InvaderMutation) EventIDIDs() (ids []uuid.UUID) {
	for id := range m.event_id {
		ids = append(ids, id)
	}
	return
}

// ResetEventID resets all changes to the "event_id" edge.
func (m *InvaderMutation) ResetEventID() {
	m.event_id = nil
	m.clearedevent_id = false
	m.removedevent_id = nil
}

// Where appends a list predicates to the InvaderMutation builder.
func (m *InvaderMutation) Where(ps ...predicate.Invader) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the InvaderMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *InvaderMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Invader, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *InvaderMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *InvaderMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Invader).
func (m *InvaderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InvaderMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.picture != nil {
		fields = append(fields, invader.FieldPicture)
	}
	if m.confidence != nil {
		fields = append(fields, invader.FieldConfidence)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InvaderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case invader.FieldPicture:
		return m.Picture()
	case invader.FieldConfidence:
		return m.Confidence()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InvaderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case invader.FieldPicture:
		return m.OldPicture(ctx)
	case invader.FieldConfidence:
		return m.OldConfidence(ctx)
	}
	return nil, fmt.Errorf("unknown Invader field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InvaderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case invader.FieldPicture:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPicture(v)
		return nil
	case invader.FieldConfidence:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfidence(v)
		return nil
	}
	return fmt.Errorf("unknown Invader field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InvaderMutation) AddedFields() []string {
	var fields []string
	if m.addconfidence != nil {
		fields = append(fields, invader.FieldConfidence)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InvaderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case invader.FieldConfidence:
		return m.AddedConfidence()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InvaderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case invader.FieldConfidence:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddConfidence(v)
		return nil
	}
	return fmt.Errorf("unknown Invader numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InvaderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InvaderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InvaderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Invader nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InvaderMutation) ResetField(name string) error {
	switch name {
	case invader.FieldPicture:
		m.ResetPicture()
		return nil
	case invader.FieldConfidence:
		m.ResetConfidence()
		return nil
	}
	return fmt.Errorf("unknown Invader field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InvaderMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.event_id != nil {
		edges = append(edges, invader.EdgeEventID)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InvaderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case invader.EdgeEventID:
		ids := make([]ent.Value, 0, len(m.event_id))
		for id := range m.event_id {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InvaderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedevent_id != nil {
		edges = append(edges, invader.EdgeEventID)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InvaderMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case invader.EdgeEventID:
		ids := make([]ent.Value, 0, len(m.removedevent_id))
		for id := range m.removedevent_id {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InvaderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedevent_id {
		edges = append(edges, invader.EdgeEventID)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InvaderMutation) EdgeCleared(name string) bool {
	switch name {
	case invader.EdgeEventID:
		return m.clearedevent_id
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InvaderMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Invader unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InvaderMutation) ResetEdge(name string) error {
	switch name {
	case invader.EdgeEventID:
		m.ResetEventID()
		return nil
	}
	return fmt.Errorf("unknown Invader edge %s", name)
}

// MovementMutation represents an operation that mutates the Movement nodes in the graph.
type MovementMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	picture         *[]byte
	clearedFields   map[string]struct{}
	event_id        map[uuid.UUID]struct{}
	removedevent_id map[uuid.UUID]struct{}
	clearedevent_id bool
	done            bool
	oldValue        func(context.Context) (*Movement, error)
	predicates      []predicate.Movement
}

var _ ent.Mutation = (*MovementMutation)(nil)

// movementOption allows management of the mutation configuration using functional options.
type movementOption func(*MovementMutation)

// newMovementMutation creates new mutation for the Movement entity.
func newMovementMutation(c config, op Op, opts ...movementOption) *MovementMutation {
	m := &MovementMutation{
		config:        c,
		op:            op,
		typ:           TypeMovement,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMovementID sets the ID field of the mutation.
func withMovementID(id uuid.UUID) movementOption {
	return func(m *MovementMutation) {
		var (
			err   error
			once  sync.Once
			value *Movement
		)
		m.oldValue = func(ctx context.Context) (*Movement, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Movement.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMovement sets the old Movement of the mutation.
func withMovement(node *Movement) movementOption {
	return func(m *MovementMutation) {
		m.oldValue = func(context.Context) (*Movement, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MovementMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MovementMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Movement entities.
func (m *MovementMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MovementMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MovementMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Movement.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPicture sets the "picture" field.
func (m *MovementMutation) SetPicture(b []byte) {
	m.picture = &b
}

// Picture returns the value of the "picture" field in the mutation.
func (m *MovementMutation) Picture() (r []byte, exists bool) {
	v := m.picture
	if v == nil {
		return
	}
	return *v, true
}

// OldPicture returns the old "picture" field's value of the Movement entity.
// If the Movement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovementMutation) OldPicture(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPicture is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPicture requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPicture: %w", err)
	}
	return oldValue.Picture, nil
}

// ResetPicture resets all changes to the "picture" field.
func (m *MovementMutation) ResetPicture() {
	m.picture = nil
}

// AddEventIDIDs adds the "event_id" edge to the Event entity by ids.
func (m *MovementMutation) AddEventIDIDs(ids ...uuid.UUID) {
	if m.event_id == nil {
		m.event_id = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.event_id[ids[i]] = struct{}{}
	}
}

// ClearEventID clears the "event_id" edge to the Event entity.
func (m *MovementMutation) ClearEventID() {
	m.clearedevent_id = true
}

// EventIDCleared reports if the "event_id" edge to the Event entity was cleared.
func (m *MovementMutation) EventIDCleared() bool {
	return m.clearedevent_id
}

// RemoveEventIDIDs removes the "event_id" edge to the Event entity by IDs.
func (m *MovementMutation) RemoveEventIDIDs(ids ...uuid.UUID) {
	if m.removedevent_id == nil {
		m.removedevent_id = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.event_id, ids[i])
		m.removedevent_id[ids[i]] = struct{}{}
	}
}

// RemovedEventID returns the removed IDs of the "event_id" edge to the Event entity.
func (m *MovementMutation) RemovedEventIDIDs() (ids []uuid.UUID) {
	for id := range m.removedevent_id {
		ids = append(ids, id)
	}
	return
}

// EventIDIDs returns the "event_id" edge IDs in the mutation.
func (m *MovementMutation) EventIDIDs() (ids []uuid.UUID) {
	for id := range m.event_id {
		ids = append(ids, id)
	}
	return
}

// ResetEventID resets all changes to the "event_id" edge.
func (m *MovementMutation) ResetEventID() {
	m.event_id = nil
	m.clearedevent_id = false
	m.removedevent_id = nil
}

// Where appends a list predicates to the MovementMutation builder.
func (m *MovementMutation) Where(ps ...predicate.Movement) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MovementMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MovementMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Movement, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MovementMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MovementMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Movement).
func (m *MovementMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MovementMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.picture != nil {
		fields = append(fields, movement.FieldPicture)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MovementMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case movement.FieldPicture:
		return m.Picture()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MovementMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case movement.FieldPicture:
		return m.OldPicture(ctx)
	}
	return nil, fmt.Errorf("unknown Movement field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MovementMutation) SetField(name string, value ent.Value) error {
	switch name {
	case movement.FieldPicture:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPicture(v)
		return nil
	}
	return fmt.Errorf("unknown Movement field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MovementMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MovementMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MovementMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Movement numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MovementMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MovementMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MovementMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Movement nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MovementMutation) ResetField(name string) error {
	switch name {
	case movement.FieldPicture:
		m.ResetPicture()
		return nil
	}
	return fmt.Errorf("unknown Movement field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MovementMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.event_id != nil {
		edges = append(edges, movement.EdgeEventID)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MovementMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case movement.EdgeEventID:
		ids := make([]ent.Value, 0, len(m.event_id))
		for id := range m.event_id {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MovementMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedevent_id != nil {
		edges = append(edges, movement.EdgeEventID)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MovementMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case movement.EdgeEventID:
		ids := make([]ent.Value, 0, len(m.removedevent_id))
		for id := range m.removedevent_id {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MovementMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedevent_id {
		edges = append(edges, movement.EdgeEventID)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MovementMutation) EdgeCleared(name string) bool {
	switch name {
	case movement.EdgeEventID:
		return m.clearedevent_id
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MovementMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Movement unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MovementMutation) ResetEdge(name string) error {
	switch name {
	case movement.EdgeEventID:
		m.ResetEventID()
		return nil
	}
	return fmt.Errorf("unknown Movement edge %s", name)
}
