// Code generated by ent, DO NOT EDIT.

package invader

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the invader type in the database.
	Label = "invader"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPicture holds the string denoting the picture field in the database.
	FieldPicture = "picture"
	// FieldConfidence holds the string denoting the confidence field in the database.
	FieldConfidence = "confidence"
	// EdgeEventID holds the string denoting the event_id edge name in mutations.
	EdgeEventID = "event_id"
	// Table holds the table name of the invader in the database.
	Table = "invaders"
	// EventIDTable is the table that holds the event_id relation/edge. The primary key declared below.
	EventIDTable = "event_invaders"
	// EventIDInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventIDInverseTable = "events"
)

// Columns holds all SQL columns for invader fields.
var Columns = []string{
	FieldID,
	FieldPicture,
	FieldConfidence,
}

var (
	// EventIDPrimaryKey and EventIDColumn2 are the table columns denoting the
	// primary key for the event_id relation (M2M).
	EventIDPrimaryKey = []string{"event_id", "invader_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Invader queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByConfidence orders the results by the confidence field.
func ByConfidence(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfidence, opts...).ToFunc()
}

// ByEventIDCount orders the results by event_id count.
func ByEventIDCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventIDStep(), opts...)
	}
}

// ByEventID orders the results by event_id terms.
func ByEventID(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventIDStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newEventIDStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventIDInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, EventIDTable, EventIDPrimaryKey...),
	)
}
