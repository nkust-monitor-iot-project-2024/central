// Code generated by ent, DO NOT EDIT.

package event

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the event type in the database.
	Label = "event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldDeviceID holds the string denoting the device_id field in the database.
	FieldDeviceID = "device_id"
	// FieldParentEventID holds the string denoting the parent_event_id field in the database.
	FieldParentEventID = "parent_event_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeInvaders holds the string denoting the invaders edge name in mutations.
	EdgeInvaders = "invaders"
	// EdgeMovements holds the string denoting the movements edge name in mutations.
	EdgeMovements = "movements"
	// EdgeMoves holds the string denoting the moves edge name in mutations.
	EdgeMoves = "moves"
	// Table holds the table name of the event in the database.
	Table = "events"
	// InvadersTable is the table that holds the invaders relation/edge. The primary key declared below.
	InvadersTable = "event_invaders"
	// InvadersInverseTable is the table name for the Invader entity.
	// It exists in this package in order to avoid circular dependency with the "invader" package.
	InvadersInverseTable = "invaders"
	// MovementsTable is the table that holds the movements relation/edge. The primary key declared below.
	MovementsTable = "event_movements"
	// MovementsInverseTable is the table name for the Movement entity.
	// It exists in this package in order to avoid circular dependency with the "movement" package.
	MovementsInverseTable = "movements"
	// MovesTable is the table that holds the moves relation/edge. The primary key declared below.
	MovesTable = "event_moves"
	// MovesInverseTable is the table name for the Move entity.
	// It exists in this package in order to avoid circular dependency with the "move" package.
	MovesInverseTable = "moves"
)

// Columns holds all SQL columns for event fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldDeviceID,
	FieldParentEventID,
	FieldCreatedAt,
}

var (
	// InvadersPrimaryKey and InvadersColumn2 are the table columns denoting the
	// primary key for the invaders relation (M2M).
	InvadersPrimaryKey = []string{"event_id", "invader_id"}
	// MovementsPrimaryKey and MovementsColumn2 are the table columns denoting the
	// primary key for the movements relation (M2M).
	MovementsPrimaryKey = []string{"event_id", "movement_id"}
	// MovesPrimaryKey and MovesColumn2 are the table columns denoting the
	// primary key for the moves relation (M2M).
	MovesPrimaryKey = []string{"event_id", "move_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeInvaded  Type = "invaded"
	TypeMovement Type = "movement"
	TypeMove     Type = "move"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeInvaded, TypeMovement, TypeMove:
		return nil
	default:
		return fmt.Errorf("event: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Event queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByDeviceID orders the results by the device_id field.
func ByDeviceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceID, opts...).ToFunc()
}

// ByParentEventID orders the results by the parent_event_id field.
func ByParentEventID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentEventID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByInvadersCount orders the results by invaders count.
func ByInvadersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInvadersStep(), opts...)
	}
}

// ByInvaders orders the results by invaders terms.
func ByInvaders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInvadersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMovementsCount orders the results by movements count.
func ByMovementsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMovementsStep(), opts...)
	}
}

// ByMovements orders the results by movements terms.
func ByMovements(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMovementsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMovesCount orders the results by moves count.
func ByMovesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMovesStep(), opts...)
	}
}

// ByMoves orders the results by moves terms.
func ByMoves(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMovesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newInvadersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InvadersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, InvadersTable, InvadersPrimaryKey...),
	)
}
func newMovementsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MovementsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, MovementsTable, MovementsPrimaryKey...),
	)
}
func newMovesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MovesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, MovesTable, MovesPrimaryKey...),
	)
}
