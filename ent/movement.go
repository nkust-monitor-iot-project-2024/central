// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/nkust-monitor-iot-project-2024/central/ent/movement"
)

// Movement is the model entity for the Movement schema.
type Movement struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Picture holds the value of the "picture" field.
	Picture []byte `json:"picture,omitempty"`
	// PictureMime holds the value of the "picture_mime" field.
	PictureMime string `json:"picture_mime,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MovementQuery when eager-loading is set.
	Edges        MovementEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MovementEdges holds the relations/edges for other nodes in the graph.
type MovementEdges struct {
	// Event holds the value of the event edge.
	Event []*Event `json:"event,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading.
func (e MovementEdges) EventOrErr() ([]*Event, error) {
	if e.loadedTypes[0] {
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Movement) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case movement.FieldPicture:
			values[i] = new([]byte)
		case movement.FieldPictureMime:
			values[i] = new(sql.NullString)
		case movement.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Movement fields.
func (m *Movement) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case movement.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				m.ID = *value
			}
		case movement.FieldPicture:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field picture", values[i])
			} else if value != nil {
				m.Picture = *value
			}
		case movement.FieldPictureMime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field picture_mime", values[i])
			} else if value.Valid {
				m.PictureMime = value.String
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Movement.
// This includes values selected through modifiers, order, etc.
func (m *Movement) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryEvent queries the "event" edge of the Movement entity.
func (m *Movement) QueryEvent() *EventQuery {
	return NewMovementClient(m.config).QueryEvent(m)
}

// Update returns a builder for updating this Movement.
// Note that you need to call Movement.Unwrap() before calling this method if this Movement
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Movement) Update() *MovementUpdateOne {
	return NewMovementClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Movement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Movement) Unwrap() *Movement {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Movement is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Movement) String() string {
	var builder strings.Builder
	builder.WriteString("Movement(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("picture=")
	builder.WriteString(fmt.Sprintf("%v", m.Picture))
	builder.WriteString(", ")
	builder.WriteString("picture_mime=")
	builder.WriteString(m.PictureMime)
	builder.WriteByte(')')
	return builder.String()
}

// Movements is a parsable slice of Movement.
type Movements []*Movement
